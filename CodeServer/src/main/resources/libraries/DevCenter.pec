define createThesaurusAndImportSamples as native method doing:
	Java: prompto.codeserver.CodeServer.createThesaurusAndImportSamples();

define serverAboutToStart as method receiving Text{} params doing:
	createThesaurusAndImportSamples
	
// don't directly connect Modules to keep them lightweight
// also eliminates any (accidental) cyclical dependency
define Dependency as storable category with attributes name and version
define dependencies as storable Dependency[] attribute

define Module as storable category with attributes name, version, description, image and dependencies

define Thesaurus as storable Module
define Library as storable Module
define Script as storable Module


define startMethod as storable Text attribute
define Batch as storable Module with attribute startMethod


define serverAboutToStartMethod as storable Text attribute
define Service as storable Module with attribute serverAboutToStartMethod

define homePage as storable Text attribute
define WebSite as storable Service with attribute homePage


define module as storable Module attribute

define lastOpened as storable DateTime attribute
define CodingSession as storable category with attributes user, module and lastOpened
define RecentSession as storable CodingSession

define Stuff as storable category with attributes name, version and module

define storable as storable Boolean attribute
define Declaration as storable Stuff with attributes dialect, storable and body 
define AttributeDeclaration as storable Declaration
define CategoryDeclaration as storable Declaration
define EnumeratedDeclaration as storable Declaration
define MethodDeclaration as storable Declaration with attribute prototype
define TestDeclaration as storable Declaration

define mimeType as storable Text attribute
define Resource as storable Stuff with attribute mimeType
define TextResource as storable Resource with attribute body
define data as storable Blob attribute
define BinaryResource as storable Resource with attribute data

define EditStatus as enumerated Text with symbols:
	CLEAN with "CLEAN" as value
	CREATED with "CREATED" as value
	DELETED with "DELETED" as value 
	DIRTY with "DIRTY" as value

define editStatus as EditStatus attribute with key index
define stuff as Stuff attribute

define EditedStuff as category with attributes editStatus and stuff

define getRecentModules as method receiving Integer count doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	sessions = fetch RecentSession 1 to count where user = user order by lastOpened desc
	return session.module for each session in sessions

define getAllModules as method doing:
	return fetch all Module order by name


define getModuleDescription as method receiving dbId and Boolean register doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	if register:
		// use this opportunity to keep track of coding sessions
		session = CodingSession with user as user, module as module and now as lastOpened 
		store session
		// use this opportunity to keep track of recent projects
		recent = fetch one mutable RecentSession where user = user and module = module
		if recent is nothing:
			recent = RecentSession with user as user, module as module and now as lastOpened 
		else:
			recent.lastOpened = now 
		store recent
		flush
	return module


define getModuleDeclarations as method receiving name and version doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	module = fetch one Module where name = name and version = version
	if module is nothing:
		raise NULL_REFERENCE
	return fetch all Declaration where module = module


define getModuleDeclarations as method receiving dbId doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	return fetch all Declaration where module = module


define getModuleResources as method receiving name and version doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	module = fetch one Module where name = name and version = version
	if module is nothing:
		raise NULL_REFERENCE
	return fetch all Resource where module = module


define getModuleResources as method receiving dbId doing:
	user = getHttpUser
	if user is nothing:
		raise NULL_REFERENCE
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	return fetch all Resource where module = module

define getModulePort as native method receiving dbId returning Integer doing:
	Java: return prompto.codeserver.ModuleProcess.launchIfNeeded(dbId);

define storeEdited as method receiving EditedStuff[] edited doing:
	deleted = d1.stuff for each d1 in edited filtered with d where d.editStatus = DELETED
	created = d2.stuff for each d2 in edited filtered with d where d.editStatus = CREATED
	updated = d3.stuff for each d3 in edited filtered with d where d.editStatus = DIRTY
	delete deleted and store created, updated 
	flush


define createModule as method receiving Text type, name, description = nothing, image = nothing,
		Boolean createStart, startMethod = nothing, Boolean createHome and homePage = nothing doing:
	decl = nothing as Declaration
	page = nothing as TextResource
	// at minimal, all modules depend on Thesaurus
	lib = fetch one Library where name = "Thesaurus"
	deps = [Dependency from lib]
	module = Module with name as name, "1.0.0.0" as version, description as description, image as image and deps as dependencies
	switch on type:
		when "library":
			module = Library from module
		when "script":
			module = Script from module
		when "batch":
			if createStart:
				startMethod = "main_" + name
			batch = Batch from module with startMethod as startMethod
			decl = createStartMethod with batch as module and startMethod as name
			module = batch
		when "service":
			if createStart:
				startMethod = "main_" + name
			service = Service from module with startMethod as serverAboutToStartMethod
			decl = createStartMethod with service as module and startMethod as name
			module = service
		when "website":
			if createStart:
				startMethod = "main_" + name
			if createHome:
				homePage = name + "/index.html"
			webSite = WebSite from module with startMethod as serverAboutToStartMethod and homePage as homePage
			decl = createStartMethod with webSite as module and startMethod as name
			page = createHomePage with webSite as module and homePage as name
			module = webSite
	store decl, page, module
	flush


define createStartMethod as method receiving module and name doing:
	body = "define " + name + " as method receiving Text{} options doing:\n"
	body = body + "\tprint \"Hello " + module.name + "\"\n" 
	decl = MethodDeclaration with name as name, "0.0.0.1" as version, "E" as dialect, "Text{}" as prototype, body as body and module as module
	return decl 


define createHomePage as method receiving module and name doing:
	body = "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\t\tHello!\n\t</body>\n</html>"
	page = TextResource with name as name, "0.0.0.1" as version, "text/html" as mimeType, body as body and module as module
	return page


define deleteModule as method receiving dbId doing:
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	stuff = fetch all Stuff where module = module
	sessions = fetch all RecentSession where module = module
	delete stuff, sessions, module
	flush


define exportModule as method receiving dbId doing:
	module = fetch one Module where dbId = dbId
	if module is nothing:
		raise NULL_REFERENCE
	type = ""
	if module is a Batch:
		type = "batch"
	else if module is a Script:
		type = "script"
	else if module is a WebSite:
		type = "website"
	else if module is a Service:
		type = "service"
	else if module is a Library:
		type = "library"
	doc = Document
	doc.type = type
	doc.name = module.name
	doc.version = module.version
	doc.description = module.description
	doc.image = module.image
	if module is a Batch:
		doc.startMethod = module.startMethod
	else if module is a Service:
		doc.serverAboutToStartMethod = module.serverAboutToStartMethod
	if module is a WebSite:
		doc.homePage = module.homePage
	components = [] as Stuff[]
	fetched = fetch all mutable Stuff where module = module
	for each component in fetched:
		component.module = Nothing 
		components = components + [component]
	doc.components = components
	return Blob from doc
