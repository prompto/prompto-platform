define AwsEC2 as native category with bindings:
	
	define category bindings as:
		Java: prompto.aws.EC2
	
and methods:
	
	define listInstances as method returning Document[] doing:
		Java: return this.listInstances();
		
	define runInstance as method receiving Text imageId, Text instanceType, Text keyName, Text roleName, Text[] securityGroupNames and Text userData returning Text doing:
		Java: return this.runInstance(imageId, instanceType, keyName, roleName, securityGroupNames, userData);
		
	define setInstanceName as method receiving Text instanceId and name doing:
		Java: this.setInstanceName(instanceId, name);

	define setInstanceAutoDeleteVolume as method receiving Text instanceId, Text deviceName and Boolean autoDelete doing:
		Java: this.setInstanceAutoDeleteVolume(instanceId, deviceName, autoDelete);

	define startInstance as method receiving Text instanceId doing:
		Java: this.startInstance(instanceId);

	define stopInstance as method receiving Text instanceId doing:
		Java: this.stopInstance(instanceId);

	define dropInstance as method receiving Text instanceId doing:
		Java: this.dropInstance(instanceId);
	
	define listIpAddresses as method returning Document[] doing:
		Java: return this.listIpAddresses();

	define createIpAddress as method returning Document doing:
		Java: return this.createIpAddress();

	define setIpAddressName as method receiving Text addressId and Text name doing:
		Java: this.setIpAddressName(addressId, name);

	define getAddressIdForIpAddress	as method receiving Text ipAddress returning Text doing:
		Java: return this.getAddressIdForIpAddress(ipAddress);

	define associateIPAddress as method receiving Text instanceId and Text addressId returning Text doing:
		Java: return this.associateIPAddress(instanceId, addressId);

	define dissociateIPAddress as method receiving Text addressId doing:
		Java: this.dissociateIPAddress(addressId);

	define dropIPAddress as method receiving Text addressId doing:
		Java: this.dropIPAddress(addressId);

	define listOwnedAMIs as method returning Document[] doing:
		Java: return this.listOwnedAMIs();

	define listAMIsWithOwnerAndName as method receiving Text ownerId and Text name returning Document[] doing:
		Java: return this.listAMIsWithOwnerAndName(ownerId, name);

	define createAMI as method receiving Text instanceId, Text name and Boolean waitForAvailability returning Text doing:
		Java: return this.createAMI(instanceId, name, waitForAvailability);

	define copyAMI as method receiving Text imageId, Text awsRegion, Text name and Boolean waitForAvailability returning Text doing:
		Java: return this.copyAMI(imageId, awsRegion, name, waitForAvailability);

	define setAMIPublic as method receiving Text imageId doing:
		Java: this.setAMIPublic(imageId);
		
	define listAvailabilityZones as method returning Document[] doing:
		Java: return this.listSubnets(); 	

	define listSubnets as method returning Document[] doing:
		Java: return this.listSubnets(); 	


define newAwsEC2 as native method receiving Text awsRegion, login = Nothing and password = Nothing returning AwsEC2 doing:
	Java: prompto.aws.EC2.newInstance(awsRegion, login, password);

define newAwsEC2WithLocalCredentials as method receiving Text awsRegion returning AwsEC2 doing:
	text = read all from Url with "file:/Users/ericvergnaud/Documents/Technical/Certificates/prompto-keys/aws/us-east-1/keys.json" as path
	keys = (readJson with text as text) as Document
	login = keys.accessKey as Text
	password = keys.secretKey as Text
	return newAwsEC2 with awsRegion as awsRegion, login as login and password as password

define "ec2 client can be created" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
and verifying:
	ec2 is not Nothing

define "ec2 instances can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	docs = ec2.listInstances
	names = doc["Name"] as Text for each doc in docs
and verifying:
	"prompto-deploy-045" in names

define "ec2 instances can be filtered" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	docs = ec2.listInstances filtered with doc where "prompto-deploy-" in doc.Name as Text
	names = doc["Name"] as Text for each doc in docs
and verifying:
	"prompto-deploy-045" in names


define "ec2 instance can be created, named and dropped" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	nodeId = ec2.runInstance with "ami-08a28a73" as imageId, "t2.micro" as instanceType,
		"prompto-admin" as keyName, "deployer" as roleName, ["default"] as securityGroupNames and "some data" as userData
	ec2.setInstanceName with nodeId as instanceId and "TEST-INSTANCE" as name
	ec2.dropInstance nodeId
and verifying:
	nodeId is not Nothing
	
define "ec2 addresses can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	docs = ec2.listIpAddresses
	printLine docs
	ips = doc["publicIp"] as Text for each doc in docs
and verifying:
	"34.234.147.231" in ips

define "ec2 address can be found by ip" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	name = ec2.getAddressIdForIpAddress "34.234.147.231"
and verifying:
	"eipalloc-d08cfee2" = name

define "ec2 address can be created, named, associated, dissociated and dropped" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	doc = ec2.createIpAddress
	addressId = doc.allocationId as Text
	ec2.setIpAddressName with addressId as addressId and "TEST-ADDRESS" as name
	assocId = ec2.associateIPAddress with "i-0c1c55554c02c4e84" as instanceId and addressId as addressId
	ec2.dissociateIPAddress assocId
	ec2.dropIPAddress addressId
and verifying:
	addressId is not Nothing
	assocId is not Nothing

define "owned AMIs can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	amis = ec2.listOwnedAMIs
and verifying:
	amis is not Nothing
	amis.count > 0
	(amis[1]["Name"] as Text).startsWith "centos-prompto"


define "AMIs with owner and name can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	ownerId = "838901125615"
	name = "centos-prompto-v*"
	amis = ec2.listAMIsWithOwnerAndName with ownerId and name
and verifying:
	amis is not Nothing
	amis.count > 0
	(amis[1]["Name"] as Text).startsWith "centos-prompto-v"


define "AMIs with owner only can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	ownerId = "838901125615"
	name = Nothing
	amis = ec2.listAMIsWithOwnerAndName with ownerId and name
and verifying:
	amis is not Nothing
	amis.count > 0
	(amis[1]["Name"] as Text).startsWith "centos-prompto-v"


define "AMIs with name only can be listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	ownerId = Nothing
	name = "centos-prompto-v*"
	amis = ec2.listAMIsWithOwnerAndName with ownerId and name
and verifying:
	amis is not Nothing
	amis.count > 0
	(amis[1]["Name"] as Text).startsWith "centos-prompto-v"


define "AMI can be created" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	amiId = ec2.createAMI with "i-0f97960da0e736ceb" as instanceId, "test-ami" as name and true as waitForAvailability
and verifying:
	amiId is not Nothing
	
	
define "Availability zones are listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	zones = ec2.listAvailabilityZones
and verifying:
	zones.count >= 6


define "Subnets are listed" as test method doing:
	ec2 = newAwsEC2WithLocalCredentials with "us-east-1" as awsRegion
	zones = ec2.listSubnets
and verifying:
	zones.count >= 6

	